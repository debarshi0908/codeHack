/** \file
 *  This C header file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : /Users/debu/Development/SQLTEST1/SqlParser2.g
 *     -                            On : 2013-04-29 17:05:52
 *     -                 for the lexer : SqlParser2LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
SqlParser2Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSqlParser2Lexer, which is returned from a call to SqlParser2LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pSqlParser2Lexer are  as follows:
 *
 *  - 
 void
      pSqlParser2Lexer->T__79(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->T__80(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->T__81(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->A_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->B_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->C_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->D_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->E_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->F_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->G_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->H_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->I_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->J_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->K_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->L_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->M_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->N_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->O_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->P_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->Q_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->R_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->S_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->T_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->U_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->V_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->W_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->X_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->Y_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->Z_(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->INTEGER_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->CHAR(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->MAKE_SET(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->LOAD_FILE(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->FOUND_ROWS(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->AVG(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->COUNT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->MAX_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->MIN_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SUM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->GROUP_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SELECT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SQL_SMALL_RESULT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SQL_BIG_RESULT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SQL_BUFFER_RESULT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SQL_CACHE_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SQL_NO_CACHE_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SQL_CALC_FOUND_ROWS(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->ALL(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->DISTINCT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->DISTINCTROW(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->STRAIGHT_JOIN(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->UNION_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->FROM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->WHERE(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->ANY(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->EXISTS(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->BY_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->EQ_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->NOT_EQ(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->LET(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->GET(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->SEMI(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->ASTERISK(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->RPAREN(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->LPAREN(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->GTH(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->LTH(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->DOT(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->PLUS(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->MINUS(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->COMMA(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->OR_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->AND_SYM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->INTEGER_NUM(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->REAL_NUMBER(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->TEXT_STRING(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->ID(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->WHITE_SPACE(pSqlParser2Lexer)
 *  - 
 void
      pSqlParser2Lexer->Tokens(pSqlParser2Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SqlParser2Lexer_H
#define _SqlParser2Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SqlParser2Lexer_Ctx_struct SqlParser2Lexer, * pSqlParser2Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
SqlParser2Lexer

 */
struct SqlParser2Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__79)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mA_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mB_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mC_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mD_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mE_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mF_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mG_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mH_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mI_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mJ_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mK_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mL_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mM_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mN_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mO_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mP_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mQ_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mR_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mS_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mT_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mU_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mV_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mW_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mX_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mY_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mZ_)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mINTEGER_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mMAKE_SET)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mLOAD_FILE)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mFOUND_ROWS)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mAVG)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mCOUNT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mMAX_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mMIN_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSUM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mGROUP_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSELECT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSQL_SMALL_RESULT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSQL_BIG_RESULT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSQL_BUFFER_RESULT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSQL_CACHE_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSQL_NO_CACHE_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSQL_CALC_FOUND_ROWS)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mALL)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mDISTINCT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mDISTINCTROW)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSTRAIGHT_JOIN)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mUNION_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mFROM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mANY)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mEXISTS)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mBY_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mEQ_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mNOT_EQ)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mLET)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mGET)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mSEMI)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mGTH)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mLTH)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mOR_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mAND_SYM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mINTEGER_NUM)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mREAL_NUMBER)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mTEXT_STRING)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mID)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mWHITE_SPACE)	(struct SqlParser2Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct SqlParser2Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SqlParser2Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct SqlParser2Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSqlParser2Lexer SqlParser2LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pSqlParser2Lexer SqlParser2LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__79      79
#define T__80      80
#define T__81      81
#define ALL      4
#define AND_SYM      5
#define ANY      6
#define ASTERISK      7
#define AVG      8
#define A_      9
#define BY_SYM      10
#define B_      11
#define CHAR      12
#define COMMA      13
#define COUNT      14
#define C_      15
#define DISTINCT      16
#define DISTINCTROW      17
#define DOT      18
#define D_      19
#define EQ_SYM      20
#define EXISTS      21
#define E_      22
#define FOUND_ROWS      23
#define FROM      24
#define F_      25
#define GET      26
#define GROUP_SYM      27
#define GTH      28
#define G_      29
#define H_      30
#define ID      31
#define INTEGER_NUM      32
#define INTEGER_SYM      33
#define I_      34
#define J_      35
#define K_      36
#define LET      37
#define LOAD_FILE      38
#define LPAREN      39
#define LTH      40
#define L_      41
#define MAKE_SET      42
#define MAX_SYM      43
#define MINUS      44
#define MIN_SYM      45
#define M_      46
#define NOT_EQ      47
#define N_      48
#define OR_SYM      49
#define O_      50
#define PLUS      51
#define P_      52
#define Q_      53
#define REAL_NUMBER      54
#define RPAREN      55
#define R_      56
#define SELECT      57
#define SEMI      58
#define SQL_BIG_RESULT      59
#define SQL_BUFFER_RESULT      60
#define SQL_CACHE_SYM      61
#define SQL_CALC_FOUND_ROWS      62
#define SQL_NO_CACHE_SYM      63
#define SQL_SMALL_RESULT      64
#define STRAIGHT_JOIN      65
#define SUM      66
#define S_      67
#define TEXT_STRING      68
#define T_      69
#define UNION_SYM      70
#define U_      71
#define V_      72
#define WHERE      73
#define WHITE_SPACE      74
#define W_      75
#define X_      76
#define Y_      77
#define Z_      78
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SqlParser2Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
