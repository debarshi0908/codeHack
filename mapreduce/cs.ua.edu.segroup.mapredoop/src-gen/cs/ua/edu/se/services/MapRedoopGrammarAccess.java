/*
* generated by Xtext
*/

package cs.ua.edu.se.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MapRedoopGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MapRedoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapRedoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MapRedoop:
		//	declaration=Declaration "{" content+=Content* "}";
		public ParserRule getRule() { return rule; }

		//declaration=Declaration "{" content+=Content* "}"
		public Group getGroup() { return cGroup; }

		//declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//content+=Content*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//Content
		public RuleCall getContentContentParserRuleCall_2_0() { return cContentContentParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEntitiesListofEntitiesParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cMrBlocksAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMrBlocksMRBlockParserRuleCall_1_0 = (RuleCall)cMrBlocksAssignment_1.eContents().get(0);
		
		//Content:
		//	entities=ListofEntities | mrBlocks=MRBlock;
		public ParserRule getRule() { return rule; }

		//entities=ListofEntities | mrBlocks=MRBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//entities=ListofEntities
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }

		//ListofEntities
		public RuleCall getEntitiesListofEntitiesParserRuleCall_0_0() { return cEntitiesListofEntitiesParserRuleCall_0_0; }

		//mrBlocks=MRBlock
		public Assignment getMrBlocksAssignment_1() { return cMrBlocksAssignment_1; }

		//MRBlock
		public RuleCall getMrBlocksMRBlockParserRuleCall_1_0() { return cMrBlocksMRBlockParserRuleCall_1_0; }
	}

	public class ListofEntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListofEntities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListofEntitiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListofEntities:
		//	{ListofEntities} "{" entities+=Entity* "}";
		public ParserRule getRule() { return rule; }

		//{ListofEntities} "{" entities+=Entity* "}"
		public Group getGroup() { return cGroup; }

		//{ListofEntities}
		public Action getListofEntitiesAction_0() { return cListofEntitiesAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_2_0() { return cEntitiesEntityParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MRBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MRBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMapperMapperParserRuleCall_0_0 = (RuleCall)cMapperAssignment_0.eContents().get(0);
		private final Assignment cReducerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReducerReducerParserRuleCall_1_0 = (RuleCall)cReducerAssignment_1.eContents().get(0);
		
		//MRBlock:
		//	mapper=Mapper reducer=Reducer;
		public ParserRule getRule() { return rule; }

		//mapper=Mapper reducer=Reducer
		public Group getGroup() { return cGroup; }

		//mapper=Mapper
		public Assignment getMapperAssignment_0() { return cMapperAssignment_0; }

		//Mapper
		public RuleCall getMapperMapperParserRuleCall_0_0() { return cMapperMapperParserRuleCall_0_0; }

		//reducer=Reducer
		public Assignment getReducerAssignment_1() { return cReducerAssignment_1; }

		//Reducer
		public RuleCall getReducerReducerParserRuleCall_1_0() { return cReducerReducerParserRuleCall_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperNameIDTerminalRuleCall_2_1_0 = (RuleCall)cSuperNameAssignment_2_1.eContents().get(0);
		
		//Declaration:
		//	"program" name=ID ("extend" superName=ID)?;
		public ParserRule getRule() { return rule; }

		//"program" name=ID ("extend" superName=ID)?
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extend" superName=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"extend"
		public Keyword getExtendKeyword_2_0() { return cExtendKeyword_2_0; }

		//superName=ID
		public Assignment getSuperNameAssignment_2_1() { return cSuperNameAssignment_2_1; }

		//ID
		public RuleCall getSuperNameIDTerminalRuleCall_2_1_0() { return cSuperNameIDTerminalRuleCall_2_1_0; }
	}

	public class MapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInkeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInkeyArgumentParserRuleCall_1_0 = (RuleCall)cInkeyAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInvalueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvalueArgumentParserRuleCall_3_0 = (RuleCall)cInvalueAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutkeyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutkeyArgumentParserRuleCall_5_0 = (RuleCall)cOutkeyAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutvalueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutvalueArgumentParserRuleCall_7_0 = (RuleCall)cOutvalueAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cBlockTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Mapper:
		//	"map(" inkey=Argument "," invalue=Argument "," outkey=Argument "," outvalue=Argument ")" Block;
		public ParserRule getRule() { return rule; }

		//"map(" inkey=Argument "," invalue=Argument "," outkey=Argument "," outvalue=Argument ")" Block
		public Group getGroup() { return cGroup; }

		//"map("
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//inkey=Argument
		public Assignment getInkeyAssignment_1() { return cInkeyAssignment_1; }

		//Argument
		public RuleCall getInkeyArgumentParserRuleCall_1_0() { return cInkeyArgumentParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//invalue=Argument
		public Assignment getInvalueAssignment_3() { return cInvalueAssignment_3; }

		//Argument
		public RuleCall getInvalueArgumentParserRuleCall_3_0() { return cInvalueArgumentParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//outkey=Argument
		public Assignment getOutkeyAssignment_5() { return cOutkeyAssignment_5; }

		//Argument
		public RuleCall getOutkeyArgumentParserRuleCall_5_0() { return cOutkeyArgumentParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//outvalue=Argument
		public Assignment getOutvalueAssignment_7() { return cOutvalueAssignment_7; }

		//Argument
		public RuleCall getOutvalueArgumentParserRuleCall_7_0() { return cOutvalueArgumentParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//Block
		public RuleCall getBlockTerminalRuleCall_9() { return cBlockTerminalRuleCall_9; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArgnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgnameIDTerminalRuleCall_1_0 = (RuleCall)cArgnameAssignment_1.eContents().get(0);
		
		//Argument:
		//	type=Type argname=ID;
		public ParserRule getRule() { return rule; }

		//type=Type argname=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//argname=ID
		public Assignment getArgnameAssignment_1() { return cArgnameAssignment_1; }

		//ID
		public RuleCall getArgnameIDTerminalRuleCall_1_0() { return cArgnameIDTerminalRuleCall_1_0; }
	}

	public class ReducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reducer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutkeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutkeyArgumentParserRuleCall_1_0 = (RuleCall)cOutkeyAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOutvalueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutvalueArgumentParserRuleCall_3_0 = (RuleCall)cOutvalueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cBlockTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Reducer:
		//	"reduce(" outkey=Argument "," outvalue=Argument ")" Block;
		public ParserRule getRule() { return rule; }

		//"reduce(" outkey=Argument "," outvalue=Argument ")" Block
		public Group getGroup() { return cGroup; }

		//"reduce("
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }

		//outkey=Argument
		public Assignment getOutkeyAssignment_1() { return cOutkeyAssignment_1; }

		//Argument
		public RuleCall getOutkeyArgumentParserRuleCall_1_0() { return cOutkeyArgumentParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//outvalue=Argument
		public Assignment getOutvalueAssignment_3() { return cOutvalueAssignment_3; }

		//Argument
		public RuleCall getOutvalueArgumentParserRuleCall_3_0() { return cOutvalueArgumentParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//Block
		public RuleCall getBlockTerminalRuleCall_5() { return cBlockTerminalRuleCall_5; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeFloatKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeDoubleKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeTextKeyword_3_0 = (Keyword)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeLongKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		//Type:
		//	type="int" | type="float" | type="double" | type="text" | type="long" | name=ID;
		public ParserRule getRule() { return rule; }

		//type="int" | type="float" | type="double" | type="text" | type="long" | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//type="int"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"int"
		public Keyword getTypeIntKeyword_0_0() { return cTypeIntKeyword_0_0; }

		//type="float"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"float"
		public Keyword getTypeFloatKeyword_1_0() { return cTypeFloatKeyword_1_0; }

		//type="double"
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//"double"
		public Keyword getTypeDoubleKeyword_2_0() { return cTypeDoubleKeyword_2_0; }

		//type="text"
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//"text"
		public Keyword getTypeTextKeyword_3_0() { return cTypeTextKeyword_3_0; }

		//type="long"
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//"long"
		public Keyword getTypeLongKeyword_4_0() { return cTypeLongKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaelementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	"metaelement" name=ID ("extend" superType=[Entity])? "{" features+=Feature+ "}";
		public ParserRule getRule() { return rule; }

		//"metaelement" name=ID ("extend" superType=[Entity])? "{" features+=Feature+ "}"
		public Group getGroup() { return cGroup; }

		//"metaelement"
		public Keyword getMetaelementKeyword_0() { return cMetaelementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extend" superType=[Entity])?
		public Group getGroup_2() { return cGroup_2; }

		//"extend"
		public Keyword getExtendKeyword_2_0() { return cExtendKeyword_2_0; }

		//superType=[Entity]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_2_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=Feature+
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cReadorWriteParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Feature:
		//	type=TypeRef name=ID ";" | ReadorWrite ";";
		public ParserRule getRule() { return rule; }

		//type=TypeRef name=ID ";" | ReadorWrite ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=TypeRef name=ID ";"
		public Group getGroup_0() { return cGroup_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_0_0_0() { return cTypeTypeRefParserRuleCall_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//ReadorWrite ";"
		public Group getGroup_1() { return cGroup_1; }

		//ReadorWrite
		public RuleCall getReadorWriteParserRuleCall_1_0() { return cReadorWriteParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class ReadorWriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadorWrite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cReadKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReadvalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cReadvalSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cReadvalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWriteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWritevalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWritevalSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cWritevalAssignment_1_1.eContents().get(0);
		
		//ReadorWrite:
		//	"read" readval=STRING | "write" writeval=STRING;
		public ParserRule getRule() { return rule; }

		//"read" readval=STRING | "write" writeval=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"read" readval=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"read"
		public Keyword getReadKeyword_0_0() { return cReadKeyword_0_0; }

		//readval=STRING
		public Assignment getReadvalAssignment_0_1() { return cReadvalAssignment_0_1; }

		//STRING
		public RuleCall getReadvalSTRINGTerminalRuleCall_0_1_0() { return cReadvalSTRINGTerminalRuleCall_0_1_0; }

		//"write" writeval=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"write"
		public Keyword getWriteKeyword_1_0() { return cWriteKeyword_1_0; }

		//writeval=STRING
		public Assignment getWritevalAssignment_1_1() { return cWritevalAssignment_1_1; }

		//STRING
		public RuleCall getWritevalSTRINGTerminalRuleCall_1_1_0() { return cWritevalSTRINGTerminalRuleCall_1_1_0; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferencedTypeParserRuleCall_0_0 = (RuleCall)cReferencedAssignment_0.eContents().get(0);
		private final Assignment cMultiAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMultiAsteriskKeyword_1_0 = (Keyword)cMultiAssignment_1.eContents().get(0);
		
		//TypeRef:
		//	referenced=Type multi?="*"?;
		public ParserRule getRule() { return rule; }

		//referenced=Type multi?="*"?
		public Group getGroup() { return cGroup; }

		//referenced=Type
		public Assignment getReferencedAssignment_0() { return cReferencedAssignment_0; }

		//Type
		public RuleCall getReferencedTypeParserRuleCall_0_0() { return cReferencedTypeParserRuleCall_0_0; }

		//multi?="*"?
		public Assignment getMultiAssignment_1() { return cMultiAssignment_1; }

		//"*"
		public Keyword getMultiAsteriskKeyword_1_0() { return cMultiAsteriskKeyword_1_0; }
	}
	
	
	private MapRedoopElements pMapRedoop;
	private ContentElements pContent;
	private ListofEntitiesElements pListofEntities;
	private MRBlockElements pMRBlock;
	private DeclarationElements pDeclaration;
	private MapperElements pMapper;
	private ArgumentElements pArgument;
	private ReducerElements pReducer;
	private TypeElements pType;
	private EntityElements pEntity;
	private FeatureElements pFeature;
	private ReadorWriteElements pReadorWrite;
	private TypeRefElements pTypeRef;
	private TerminalRule tBlock;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MapRedoopGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MapRedoop:
	//	declaration=Declaration "{" content+=Content* "}";
	public MapRedoopElements getMapRedoopAccess() {
		return (pMapRedoop != null) ? pMapRedoop : (pMapRedoop = new MapRedoopElements());
	}
	
	public ParserRule getMapRedoopRule() {
		return getMapRedoopAccess().getRule();
	}

	//Content:
	//	entities=ListofEntities | mrBlocks=MRBlock;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//ListofEntities:
	//	{ListofEntities} "{" entities+=Entity* "}";
	public ListofEntitiesElements getListofEntitiesAccess() {
		return (pListofEntities != null) ? pListofEntities : (pListofEntities = new ListofEntitiesElements());
	}
	
	public ParserRule getListofEntitiesRule() {
		return getListofEntitiesAccess().getRule();
	}

	//MRBlock:
	//	mapper=Mapper reducer=Reducer;
	public MRBlockElements getMRBlockAccess() {
		return (pMRBlock != null) ? pMRBlock : (pMRBlock = new MRBlockElements());
	}
	
	public ParserRule getMRBlockRule() {
		return getMRBlockAccess().getRule();
	}

	//Declaration:
	//	"program" name=ID ("extend" superName=ID)?;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Mapper:
	//	"map(" inkey=Argument "," invalue=Argument "," outkey=Argument "," outvalue=Argument ")" Block;
	public MapperElements getMapperAccess() {
		return (pMapper != null) ? pMapper : (pMapper = new MapperElements());
	}
	
	public ParserRule getMapperRule() {
		return getMapperAccess().getRule();
	}

	//Argument:
	//	type=Type argname=ID;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//Reducer:
	//	"reduce(" outkey=Argument "," outvalue=Argument ")" Block;
	public ReducerElements getReducerAccess() {
		return (pReducer != null) ? pReducer : (pReducer = new ReducerElements());
	}
	
	public ParserRule getReducerRule() {
		return getReducerAccess().getRule();
	}

	//Type:
	//	type="int" | type="float" | type="double" | type="text" | type="long" | name=ID;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Entity:
	//	"metaelement" name=ID ("extend" superType=[Entity])? "{" features+=Feature+ "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Feature:
	//	type=TypeRef name=ID ";" | ReadorWrite ";";
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//ReadorWrite:
	//	"read" readval=STRING | "write" writeval=STRING;
	public ReadorWriteElements getReadorWriteAccess() {
		return (pReadorWrite != null) ? pReadorWrite : (pReadorWrite = new ReadorWriteElements());
	}
	
	public ParserRule getReadorWriteRule() {
		return getReadorWriteAccess().getRule();
	}

	//TypeRef:
	//	referenced=Type multi?="*"?;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//terminal Block:
	//	"["->"]";
	public TerminalRule getBlockRule() {
		return (tBlock != null) ? tBlock : (tBlock = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Block"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
